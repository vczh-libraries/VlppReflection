=============================================================
Non-deterministic PDA
=============================================================
Root Rule Start: Value.RootStart
Root Rule End: Value.RootEnd
Rule Start: Value.Start
Rule End: Value.2

Root Rule Start: Condition.RootStart
Root Rule End: Condition.RootEnd
Rule Start: Condition.Start
Rule End: Condition.19

Root Rule Start: Assign.RootStart
Root Rule End: Assign.RootEnd
Rule Start: Assign.Start
Rule End: Assign.4

Root Rule Start: Return.RootStart
Root Rule End: Return.RootEnd
Rule Start: Return.Start
Rule End: Return.3

Root Rule Start: Block.RootStart
Root Rule End: Block.RootEnd
Rule Start: Block.Start
Rule End: Block.4

Root Rule Start: IfElse.RootStart
Root Rule End: IfElse.RootEnd
Rule Start: IfElse.Start
Rule End: IfElse.6

Root Rule Start: Stat.RootStart
Root Rule End: Stat.RootEnd
Rule Start: Stat.Start
Rule End: Stat.1

@ $<Value>
STATE Value.RootStart
    TOKEN-BEGIN => Value.Start

@ <Value>
STATE Value.Start
    [VALUE] => Value.1
        ASSIGN content

<Value>: VALUE : content as ValueExpression@
STATE Value.1
    EPSILON => Value.2
        CREATE ValueExpression

<Value>: VALUE : content as ValueExpression@
END STATE Value.2
    TOKEN-FINISH => Value.RootEnd

$<Value> @
STATE Value.RootEnd

--------------------------------
@ $<Condition>
STATE Condition.RootStart
    TOKEN-BEGIN => Condition.Start

@ <Condition>
STATE Condition.Start
    <Value> => Condition.1
        ASSIGN leftOperand

<Condition>: Value : leftOperand@ "<" Value : rightOperand as ConditionExpression with { conditionOperator = "LT" }
<Condition>: Value : leftOperand@ "<=" Value : rightOperand as ConditionExpression with { conditionOperator = "LE" }
<Condition>: Value : leftOperand@ ">" Value : rightOperand as ConditionExpression with { conditionOperator = "GT" }
<Condition>: Value : leftOperand@ ">=" Value : rightOperand as ConditionExpression with { conditionOperator = "GE" }
<Condition>: Value : leftOperand@ "==" Value : rightOperand as ConditionExpression with { conditionOperator = "EQ" }
<Condition>: Value : leftOperand@ "!=" Value : rightOperand as ConditionExpression with { conditionOperator = "NE" }
STATE Condition.1
    [LT "<"] => Condition.7
        CREATE ConditionExpression
        SET conditionOperator => LT
    [LE "<="] => Condition.7
        CREATE ConditionExpression
        SET conditionOperator => LE
    [GT ">"] => Condition.7
        CREATE ConditionExpression
        SET conditionOperator => GT
    [GE ">="] => Condition.7
        CREATE ConditionExpression
        SET conditionOperator => GE
    [EQ "=="] => Condition.7
        CREATE ConditionExpression
        SET conditionOperator => EQ
    [NE "!="] => Condition.7
        CREATE ConditionExpression
        SET conditionOperator => NE

<Condition>: Value : leftOperand "<"@ Value : rightOperand as ConditionExpression with { conditionOperator = "LT" }
<Condition>: Value : leftOperand "<="@ Value : rightOperand as ConditionExpression with { conditionOperator = "LE" }
<Condition>: Value : leftOperand ">"@ Value : rightOperand as ConditionExpression with { conditionOperator = "GT" }
<Condition>: Value : leftOperand ">="@ Value : rightOperand as ConditionExpression with { conditionOperator = "GE" }
<Condition>: Value : leftOperand "=="@ Value : rightOperand as ConditionExpression with { conditionOperator = "EQ" }
<Condition>: Value : leftOperand "!="@ Value : rightOperand as ConditionExpression with { conditionOperator = "NE" }
STATE Condition.7
    <Value> => Condition.13
        ASSIGN rightOperand

<Condition>: Value : leftOperand "<" Value : rightOperand as ConditionExpression@ with { conditionOperator = "LT" }
<Condition>: Value : leftOperand "<=" Value : rightOperand as ConditionExpression@ with { conditionOperator = "LE" }
<Condition>: Value : leftOperand ">" Value : rightOperand as ConditionExpression@ with { conditionOperator = "GT" }
<Condition>: Value : leftOperand ">=" Value : rightOperand as ConditionExpression@ with { conditionOperator = "GE" }
<Condition>: Value : leftOperand "==" Value : rightOperand as ConditionExpression@ with { conditionOperator = "EQ" }
<Condition>: Value : leftOperand "!=" Value : rightOperand as ConditionExpression@ with { conditionOperator = "NE" }
STATE Condition.13
    EPSILON => Condition.19

<Condition>: Value : leftOperand "<" Value : rightOperand as ConditionExpression with { conditionOperator = "LT" }@
<Condition>: Value : leftOperand "<=" Value : rightOperand as ConditionExpression with { conditionOperator = "LE" }@
<Condition>: Value : leftOperand ">" Value : rightOperand as ConditionExpression with { conditionOperator = "GT" }@
<Condition>: Value : leftOperand ">=" Value : rightOperand as ConditionExpression with { conditionOperator = "GE" }@
<Condition>: Value : leftOperand "==" Value : rightOperand as ConditionExpression with { conditionOperator = "EQ" }@
<Condition>: Value : leftOperand "!=" Value : rightOperand as ConditionExpression with { conditionOperator = "NE" }@
END STATE Condition.19
    TOKEN-FINISH => Condition.RootEnd

$<Condition> @
STATE Condition.RootEnd

--------------------------------
@ $<Assign>
STATE Assign.RootStart
    TOKEN-BEGIN => Assign.Start

@ <Assign>
STATE Assign.Start
    <Value> => Assign.1
        ASSIGN leftOperand

<Assign>: Value : leftOperand@ "=" Value : rightOperand as AssignStatement
STATE Assign.1
    [ASSIGN "="] => Assign.2

<Assign>: Value : leftOperand "="@ Value : rightOperand as AssignStatement
STATE Assign.2
    <Value> => Assign.3
        ASSIGN rightOperand

<Assign>: Value : leftOperand "=" Value : rightOperand as AssignStatement@
STATE Assign.3
    EPSILON => Assign.4
        CREATE AssignStatement

<Assign>: Value : leftOperand "=" Value : rightOperand as AssignStatement@
END STATE Assign.4
    TOKEN-FINISH => Assign.RootEnd

$<Assign> @
STATE Assign.RootEnd

--------------------------------
@ $<Return>
STATE Return.RootStart
    TOKEN-BEGIN => Return.Start

@ <Return>
STATE Return.Start
    [RETURN "return"] => Return.1

<Return>: "return"@ Value : result as ReturnStatement
STATE Return.1
    <Value> => Return.2
        ASSIGN result

<Return>: "return" Value : result as ReturnStatement@
STATE Return.2
    EPSILON => Return.3
        CREATE ReturnStatement

<Return>: "return" Value : result as ReturnStatement@
END STATE Return.3
    TOKEN-FINISH => Return.RootEnd

$<Return> @
STATE Return.RootEnd

--------------------------------
@ $<Block>
STATE Block.RootStart
    TOKEN-BEGIN => Block.Start

@ <Block>
STATE Block.Start
    [OPEN "{"] => Block.1

<Block>: "{"@ { Stat : statements } "}" as BlockStatement
<Block>: "{" @{ Stat : statements } "}" as BlockStatement
STATE Block.1
    [CLOSE "}"] => Block.2
    <Stat> => Block.1
        ASSIGN statements

<Block>: "{" { Stat : statements } "}" as BlockStatement@
STATE Block.2
    EPSILON => Block.4
        CREATE BlockStatement

<Block>: "{" { Stat : statements } "}" as BlockStatement@
END STATE Block.4
    TOKEN-FINISH => Block.RootEnd

$<Block> @
STATE Block.RootEnd

--------------------------------
@ $<IfElse>
STATE IfElse.RootStart
    TOKEN-BEGIN => IfElse.Start

@ <IfElse>
STATE IfElse.Start
    [IF "if"] => IfElse.1

<IfElse>: "if"@ Condition : condition "then" Stat : trueStatement [ "else" Stat : falseStatement ] as IfElseStatement
STATE IfElse.1
    <Condition> => IfElse.2
        ASSIGN condition

<IfElse>: "if" Condition : condition@ "then" Stat : trueStatement [ "else" Stat : falseStatement ] as IfElseStatement
STATE IfElse.2
    [THEN "then"] => IfElse.3

<IfElse>: "if" Condition : condition "then"@ Stat : trueStatement [ "else" Stat : falseStatement ] as IfElseStatement
STATE IfElse.3
    <Stat> => IfElse.4
        ASSIGN trueStatement

<IfElse>: "if" Condition : condition "then" Stat : trueStatement@ [ "else" Stat : falseStatement ] as IfElseStatement
STATE IfElse.4
    EPSILON => IfElse.6
        CREATE IfElseStatement
    [ELSE "else"] => IfElse.5

<IfElse>: "if" Condition : condition "then" Stat : trueStatement [ "else" Stat : falseStatement ] as IfElseStatement@
END STATE IfElse.6
    TOKEN-FINISH => IfElse.RootEnd

<IfElse>: "if" Condition : condition "then" Stat : trueStatement [ "else"@ Stat : falseStatement ] as IfElseStatement
STATE IfElse.5
    <Stat> => IfElse.7
        ASSIGN falseStatement

$<IfElse> @
STATE IfElse.RootEnd

<IfElse>: "if" Condition : condition "then" Stat : trueStatement [ "else" Stat : falseStatement ] as IfElseStatement@
STATE IfElse.7
    EPSILON => IfElse.6
        CREATE IfElseStatement

--------------------------------
@ $<Stat>
STATE Stat.RootStart
    TOKEN-BEGIN => Stat.Start

@ <Stat>
STATE Stat.Start
    <Assign> => Stat.1
        USING 
    <Return> => Stat.1
        USING 
    <Block> => Stat.1
        USING 
    <IfElse> => Stat.1
        USING 

<Stat>: !Assign | !Return | !Block | !IfElse@
END STATE Stat.1
    TOKEN-FINISH => Stat.RootEnd

$<Stat> @
STATE Stat.RootEnd

--------------------------------
