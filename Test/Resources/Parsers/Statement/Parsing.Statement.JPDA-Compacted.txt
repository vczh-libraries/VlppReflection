=============================================================
Compacted Joint PDA
=============================================================
Root Rule Start: Value.RootStart
Root Rule End: Value.RootEnd
Rule Start: Value.Start
Rule End: Value.2

Root Rule Start: Condition.RootStart
Root Rule End: Condition.RootEnd
Rule Start: Condition.Start
Rule End: Condition.4

Root Rule Start: Assign.RootStart
Root Rule End: Assign.RootEnd
Rule Start: Assign.Start
Rule End: Assign.4

Root Rule Start: Return.RootStart
Root Rule End: Return.RootEnd
Rule Start: Return.Start
Rule End: Return.3

Root Rule Start: Block.RootStart
Root Rule End: Block.RootEnd
Rule Start: Block.Start
Rule End: Block.3

Root Rule Start: IfElse.RootStart
Root Rule End: IfElse.RootEnd
Rule Start: IfElse.Start
Rule End: IfElse.6

Root Rule Start: Stat.RootStart
Root Rule End: Stat.RootEnd
Rule Start: Stat.Start
Rule End: Stat.1

@ $<Value>
STATE Value.RootStart
    TOKEN-BEGIN => Value.Start

@ <Value>
STATE Value.Start
    [VALUE] => Value.1
        ASSIGN content

<Value>: VALUE : content as ValueExpression@
STATE Value.1
    TOKEN-FINISH [SHIFT-REDUCE-COMPACTED] => Value.RootEnd
        CREATE ValueExpression
    NORMAL-REDUCE [SHIFT-REDUCE-COMPACTED] => Condition.1
        CREATE ValueExpression
        REDUCE [Condition.Start => Condition.1] 
        ASSIGN leftOperand
    NORMAL-REDUCE [SHIFT-REDUCE-COMPACTED] => Condition.3
        CREATE ValueExpression
        REDUCE [Condition.2 => Condition.3] 
        ASSIGN rightOperand
    NORMAL-REDUCE [SHIFT-REDUCE-COMPACTED] => Assign.1
        CREATE ValueExpression
        REDUCE [Assign.Start => Assign.1] 
        ASSIGN leftOperand
    NORMAL-REDUCE [SHIFT-REDUCE-COMPACTED] => Assign.3
        CREATE ValueExpression
        REDUCE [Assign.2 => Assign.3] 
        ASSIGN rightOperand
    NORMAL-REDUCE [SHIFT-REDUCE-COMPACTED] => Return.2
        CREATE ValueExpression
        REDUCE [Return.1 => Return.2] 
        ASSIGN result

$<Value> @
STATE Value.RootEnd

<Condition>: Value : leftOperand@ "<" Value : rightOperand as ConditionExpression with { conditionOperator = "LT" }
<Condition>: Value : leftOperand@ "<=" Value : rightOperand as ConditionExpression with { conditionOperator = "LE" }
<Condition>: Value : leftOperand@ ">" Value : rightOperand as ConditionExpression with { conditionOperator = "GT" }
<Condition>: Value : leftOperand@ ">=" Value : rightOperand as ConditionExpression with { conditionOperator = "GE" }
<Condition>: Value : leftOperand@ "==" Value : rightOperand as ConditionExpression with { conditionOperator = "EQ" }
<Condition>: Value : leftOperand@ "!=" Value : rightOperand as ConditionExpression with { conditionOperator = "NE" }
STATE Condition.1
    [LT "<"] => Condition.2
        CREATE ConditionExpression
        SET conditionOperator => LT
    [LE "<="] => Condition.2
        CREATE ConditionExpression
        SET conditionOperator => LE
    [GT ">"] => Condition.2
        CREATE ConditionExpression
        SET conditionOperator => GT
    [GE ">="] => Condition.2
        CREATE ConditionExpression
        SET conditionOperator => GE
    [EQ "=="] => Condition.2
        CREATE ConditionExpression
        SET conditionOperator => EQ
    [NE "!="] => Condition.2
        CREATE ConditionExpression
        SET conditionOperator => NE

<Condition>: Value : leftOperand "<" Value : rightOperand as ConditionExpression@ with { conditionOperator = "LT" }
<Condition>: Value : leftOperand "<=" Value : rightOperand as ConditionExpression@ with { conditionOperator = "LE" }
<Condition>: Value : leftOperand ">" Value : rightOperand as ConditionExpression@ with { conditionOperator = "GT" }
<Condition>: Value : leftOperand ">=" Value : rightOperand as ConditionExpression@ with { conditionOperator = "GE" }
<Condition>: Value : leftOperand "==" Value : rightOperand as ConditionExpression@ with { conditionOperator = "EQ" }
<Condition>: Value : leftOperand "!=" Value : rightOperand as ConditionExpression@ with { conditionOperator = "NE" }
STATE Condition.3
    TOKEN-FINISH [SHIFT-REDUCE-COMPACTED] => Condition.RootEnd
    NORMAL-REDUCE [SHIFT-REDUCE-COMPACTED] => IfElse.2
        REDUCE [IfElse.1 => IfElse.2] 
        ASSIGN condition

<Assign>: Value : leftOperand@ "=" Value : rightOperand as AssignStatement
STATE Assign.1
    [ASSIGN "="] => Assign.2

<Assign>: Value : leftOperand "=" Value : rightOperand as AssignStatement@
STATE Assign.3
    TOKEN-FINISH [SHIFT-REDUCE-COMPACTED] => Assign.RootEnd
        CREATE AssignStatement
    NORMAL-REDUCE [SHIFT-REDUCE-COMPACTED] => Stat.1
        CREATE AssignStatement
        REDUCE [Stat.Start => Stat.1] 
        USING 

<Return>: "return" Value : result as ReturnStatement@
STATE Return.2
    TOKEN-FINISH [SHIFT-REDUCE-COMPACTED] => Return.RootEnd
        CREATE ReturnStatement
    NORMAL-REDUCE [SHIFT-REDUCE-COMPACTED] => Stat.1
        CREATE ReturnStatement
        REDUCE [Stat.Start => Stat.1] 
        USING 

<Condition>: Value : leftOperand "<"@ Value : rightOperand as ConditionExpression with { conditionOperator = "LT" }
<Condition>: Value : leftOperand "<="@ Value : rightOperand as ConditionExpression with { conditionOperator = "LE" }
<Condition>: Value : leftOperand ">"@ Value : rightOperand as ConditionExpression with { conditionOperator = "GT" }
<Condition>: Value : leftOperand ">="@ Value : rightOperand as ConditionExpression with { conditionOperator = "GE" }
<Condition>: Value : leftOperand "=="@ Value : rightOperand as ConditionExpression with { conditionOperator = "EQ" }
<Condition>: Value : leftOperand "!="@ Value : rightOperand as ConditionExpression with { conditionOperator = "NE" }
STATE Condition.2
    [VALUE] [SHIFT-REDUCE-COMPACTED] => Value.1
        SHIFT [Condition.2 => Condition.3] 
        ASSIGN content

$<Condition> @
STATE Condition.RootEnd

<IfElse>: "if" Condition : condition@ "then" Stat : trueStatement [ "else" Stat : falseStatement ] as IfElseStatement
STATE IfElse.2
    [THEN "then"] => IfElse.3

<Assign>: Value : leftOperand "="@ Value : rightOperand as AssignStatement
STATE Assign.2
    [VALUE] [SHIFT-REDUCE-COMPACTED] => Value.1
        SHIFT [Assign.2 => Assign.3] 
        ASSIGN content

$<Assign> @
STATE Assign.RootEnd

<Stat>: !Assign | !Return | !Block | !IfElse@
END STATE Stat.1
    NORMAL-REDUCE => Block.1
        REDUCE [Block.1 => Block.1] 
        ASSIGN statements
    NORMAL-REDUCE => IfElse.4
        REDUCE [IfElse.3 => IfElse.4] 
        ASSIGN trueStatement
    NORMAL-REDUCE => IfElse.7
        REDUCE [IfElse.5 => IfElse.7] 
        ASSIGN falseStatement
    TOKEN-FINISH => Stat.RootEnd

$<Return> @
STATE Return.RootEnd

<IfElse>: "if" Condition : condition "then"@ Stat : trueStatement [ "else" Stat : falseStatement ] as IfElseStatement
STATE IfElse.3
    [VALUE] [SHIFT-REDUCE-COMPACTED] => Value.1
        SHIFT [IfElse.3 => IfElse.4] 
        SHIFT [Stat.Start => Stat.1] 
        SHIFT [Assign.Start => Assign.1] 
        ASSIGN content
    [RETURN "return"] [SHIFT-REDUCE-COMPACTED] => Return.1
        SHIFT [IfElse.3 => IfElse.4] 
        SHIFT [Stat.Start => Stat.1] 
    [OPEN "{"] [SHIFT-REDUCE-COMPACTED] => Block.1
        SHIFT [IfElse.3 => IfElse.4] 
        SHIFT [Stat.Start => Stat.1] 
    [IF "if"] [SHIFT-REDUCE-COMPACTED] => IfElse.1
        SHIFT [IfElse.3 => IfElse.4] 
        SHIFT [Stat.Start => Stat.1] 

<Block>: "{"@ { Stat : statements } "}" as BlockStatement
<Block>: "{" @{ Stat : statements } "}" as BlockStatement
STATE Block.1
    [CLOSE "}"] => Block.2
    [VALUE] [SHIFT-REDUCE-COMPACTED] => Value.1
        SHIFT [Block.1 => Block.1] 
        SHIFT [Stat.Start => Stat.1] 
        SHIFT [Assign.Start => Assign.1] 
        ASSIGN content
    [RETURN "return"] [SHIFT-REDUCE-COMPACTED] => Return.1
        SHIFT [Block.1 => Block.1] 
        SHIFT [Stat.Start => Stat.1] 
    [OPEN "{"] [SHIFT-REDUCE-COMPACTED] => Block.1
        SHIFT [Block.1 => Block.1] 
        SHIFT [Stat.Start => Stat.1] 
    [IF "if"] [SHIFT-REDUCE-COMPACTED] => IfElse.1
        SHIFT [Block.1 => Block.1] 
        SHIFT [Stat.Start => Stat.1] 
    [OPEN "{"] [SHIFT-REDUCE-COMPACTED] => Block.1
        SHIFT [Block.1 => Block.1] 
        SHIFT [Stat.Start => Stat.1] 

<IfElse>: "if" Condition : condition "then" Stat : trueStatement@ [ "else" Stat : falseStatement ] as IfElseStatement
STATE IfElse.4
    [ELSE "else"] => IfElse.5
    TOKEN-FINISH [SHIFT-REDUCE-COMPACTED] => IfElse.RootEnd
        CREATE IfElseStatement
    NORMAL-REDUCE [SHIFT-REDUCE-COMPACTED] => Stat.1
        CREATE IfElseStatement
        REDUCE [Stat.Start => Stat.1] 
        USING 

<IfElse>: "if" Condition : condition "then" Stat : trueStatement [ "else" Stat : falseStatement ] as IfElseStatement@
STATE IfElse.7
    TOKEN-FINISH [SHIFT-REDUCE-COMPACTED] => IfElse.RootEnd
        CREATE IfElseStatement
    NORMAL-REDUCE [SHIFT-REDUCE-COMPACTED] => Stat.1
        CREATE IfElseStatement
        REDUCE [Stat.Start => Stat.1] 
        USING 

$<Stat> @
STATE Stat.RootEnd

<Return>: "return"@ Value : result as ReturnStatement
STATE Return.1
    [VALUE] [SHIFT-REDUCE-COMPACTED] => Value.1
        SHIFT [Return.1 => Return.2] 
        ASSIGN content

<IfElse>: "if"@ Condition : condition "then" Stat : trueStatement [ "else" Stat : falseStatement ] as IfElseStatement
STATE IfElse.1
    [VALUE] [SHIFT-REDUCE-COMPACTED] => Value.1
        SHIFT [IfElse.1 => IfElse.2] 
        SHIFT [Condition.Start => Condition.1] 
        ASSIGN content

<Block>: "{" { Stat : statements } "}" as BlockStatement@
STATE Block.2
    TOKEN-FINISH [SHIFT-REDUCE-COMPACTED] => Block.RootEnd
        CREATE BlockStatement
    NORMAL-REDUCE [SHIFT-REDUCE-COMPACTED] => Stat.1
        CREATE BlockStatement
        REDUCE [Stat.Start => Stat.1] 
        USING 

<IfElse>: "if" Condition : condition "then" Stat : trueStatement [ "else"@ Stat : falseStatement ] as IfElseStatement
STATE IfElse.5
    [VALUE] [SHIFT-REDUCE-COMPACTED] => Value.1
        SHIFT [IfElse.5 => IfElse.7] 
        SHIFT [Stat.Start => Stat.1] 
        SHIFT [Assign.Start => Assign.1] 
        ASSIGN content
    [RETURN "return"] [SHIFT-REDUCE-COMPACTED] => Return.1
        SHIFT [IfElse.5 => IfElse.7] 
        SHIFT [Stat.Start => Stat.1] 
    [OPEN "{"] [SHIFT-REDUCE-COMPACTED] => Block.1
        SHIFT [IfElse.5 => IfElse.7] 
        SHIFT [Stat.Start => Stat.1] 
    [IF "if"] [SHIFT-REDUCE-COMPACTED] => IfElse.1
        SHIFT [IfElse.5 => IfElse.7] 
        SHIFT [Stat.Start => Stat.1] 

$<IfElse> @
STATE IfElse.RootEnd

$<Block> @
STATE Block.RootEnd

--------------------------------
@ $<Condition>
STATE Condition.RootStart
    TOKEN-BEGIN => Condition.Start

@ <Condition>
STATE Condition.Start
    [VALUE] [SHIFT-REDUCE-COMPACTED] => Value.1
        SHIFT [Condition.Start => Condition.1] 
        ASSIGN content

--------------------------------
@ $<Assign>
STATE Assign.RootStart
    TOKEN-BEGIN => Assign.Start

@ <Assign>
STATE Assign.Start
    [VALUE] [SHIFT-REDUCE-COMPACTED] => Value.1
        SHIFT [Assign.Start => Assign.1] 
        ASSIGN content

--------------------------------
@ $<Return>
STATE Return.RootStart
    TOKEN-BEGIN => Return.Start

@ <Return>
STATE Return.Start
    [RETURN "return"] => Return.1

--------------------------------
@ $<Block>
STATE Block.RootStart
    TOKEN-BEGIN => Block.Start

@ <Block>
STATE Block.Start
    [OPEN "{"] => Block.1

--------------------------------
@ $<IfElse>
STATE IfElse.RootStart
    TOKEN-BEGIN => IfElse.Start

@ <IfElse>
STATE IfElse.Start
    [IF "if"] => IfElse.1

--------------------------------
@ $<Stat>
STATE Stat.RootStart
    TOKEN-BEGIN => Stat.Start

@ <Stat>
STATE Stat.Start
    [VALUE] [SHIFT-REDUCE-COMPACTED] => Value.1
        SHIFT [Stat.Start => Stat.1] 
        SHIFT [Assign.Start => Assign.1] 
        ASSIGN content
    [RETURN "return"] [SHIFT-REDUCE-COMPACTED] => Return.1
        SHIFT [Stat.Start => Stat.1] 
    [OPEN "{"] [SHIFT-REDUCE-COMPACTED] => Block.1
        SHIFT [Stat.Start => Stat.1] 
    [IF "if"] [SHIFT-REDUCE-COMPACTED] => IfElse.1
        SHIFT [Stat.Start => Stat.1] 

--------------------------------
