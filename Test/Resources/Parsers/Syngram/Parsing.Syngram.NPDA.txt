=============================================================
Non-deterministic PDA
=============================================================
Root Rule Start: Attribute.RootStart
Root Rule End: Attribute.RootEnd
Rule Start: Attribute.Start
Rule End: Attribute.7

Root Rule Start: Type.RootStart
Root Rule End: Type.RootEnd
Rule Start: Type.Start
Rule End: Type.5

Root Rule Start: EnumMember.RootStart
Root Rule End: EnumMember.RootEnd
Rule Start: EnumMember.Start
Rule End: EnumMember.5

Root Rule Start: Enum.RootStart
Root Rule End: Enum.RootEnd
Rule Start: Enum.Start
Rule End: Enum.9

Root Rule Start: ClassMember.RootStart
Root Rule End: ClassMember.RootEnd
Rule Start: ClassMember.Start
Rule End: ClassMember.8

Root Rule Start: Class.RootStart
Root Rule End: Class.RootEnd
Rule Start: Class.Start
Rule End: Class.14

Root Rule Start: TypeDecl.RootStart
Root Rule End: TypeDecl.RootEnd
Rule Start: TypeDecl.Start
Rule End: TypeDecl.1

Root Rule Start: PrimitiveGrammar.RootStart
Root Rule End: PrimitiveGrammar.RootEnd
Rule Start: PrimitiveGrammar.Start
Rule End: PrimitiveGrammar.8

Root Rule Start: SequenceGrammar.RootStart
Root Rule End: SequenceGrammar.RootEnd
Rule Start: SequenceGrammar.Start
Rule End: SequenceGrammar.1

Root Rule Start: AlternativeGrammar.RootStart
Root Rule End: AlternativeGrammar.RootEnd
Rule Start: AlternativeGrammar.Start
Rule End: AlternativeGrammar.1

Root Rule Start: Grammar.RootStart
Root Rule End: Grammar.RootEnd
Rule Start: Grammar.Start
Rule End: Grammar.1

Root Rule Start: TokenDecl.RootStart
Root Rule End: TokenDecl.RootEnd
Rule Start: TokenDecl.Start
Rule End: TokenDecl.13

Root Rule Start: RuleDecl.RootStart
Root Rule End: RuleDecl.RootEnd
Rule Start: RuleDecl.Start
Rule End: RuleDecl.8

Root Rule Start: ParserDecl.RootStart
Root Rule End: ParserDecl.RootEnd
Rule Start: ParserDecl.Start
Rule End: ParserDecl.3

@ $<Attribute>
STATE Attribute.RootStart
    TOKEN-BEGIN => Attribute.Start

@ <Attribute>
STATE Attribute.Start
    [ATT "@"] => Attribute.1

<Attribute>: "@"@ NAME : name "(" [ STRING : arguments { "," STRING : arguments } ] ")" as AttributeDef
STATE Attribute.1
    [NAME] => Attribute.2
        ASSIGN name

<Attribute>: "@" NAME : name@ "(" [ STRING : arguments { "," STRING : arguments } ] ")" as AttributeDef
STATE Attribute.2
    [PREOPEN "("] => Attribute.3

<Attribute>: "@" NAME : name "("@ [ STRING : arguments { "," STRING : arguments } ] ")" as AttributeDef
STATE Attribute.3
    [PRECLOSE ")"] => Attribute.5
    [STRING] => Attribute.4
        ASSIGN arguments

<Attribute>: "@" NAME : name "(" [ STRING : arguments { "," STRING : arguments } ] ")" as AttributeDef@
STATE Attribute.5
    EPSILON => Attribute.7
        CREATE AttributeDef

<Attribute>: "@" NAME : name "(" [ STRING : arguments@ { "," STRING : arguments } ] ")" as AttributeDef
<Attribute>: "@" NAME : name "(" [ STRING : arguments @{ "," STRING : arguments } ] ")" as AttributeDef
STATE Attribute.4
    [COMMA ","] => Attribute.6
    [PRECLOSE ")"] => Attribute.5

<Attribute>: "@" NAME : name "(" [ STRING : arguments { "," STRING : arguments } ] ")" as AttributeDef@
END STATE Attribute.7
    TOKEN-FINISH => Attribute.RootEnd

<Attribute>: "@" NAME : name "(" [ STRING : arguments { ","@ STRING : arguments } ] ")" as AttributeDef
STATE Attribute.6
    [STRING] => Attribute.4
        ASSIGN arguments

$<Attribute> @
STATE Attribute.RootEnd

--------------------------------
@ $<Type>
STATE Type.RootStart
    TOKEN-BEGIN => Type.Start

@ <Type>
STATE Type.Start
    [NAME] => Type.1
        ASSIGN name
        CREATE PrimitiveTypeObj
    [TOKEN "token"] => Type.1
        CREATE TokenTypeObj
    <Type> => Type.3
        ASSIGN parentType
    <Type> => Type.4
        ASSIGN elementType

<Type>: NAME : name as PrimitiveTypeObj@
<Type>: "token" as TokenTypeObj@
<Type>: Type : parentType "." NAME : name as SubTypeObj@
<Type>: Type : elementType "[" "]" as ArrayTypeObj@
STATE Type.1
    EPSILON => Type.5

<Type>: Type : parentType@ "." NAME : name as SubTypeObj
STATE Type.3
    [DOT "."] => Type.7

<Type>: Type : elementType@ "[" "]" as ArrayTypeObj
STATE Type.4
    [OPTOPEN "["] => Type.8

<Type>: NAME : name as PrimitiveTypeObj@
<Type>: "token" as TokenTypeObj@
<Type>: Type : parentType "." NAME : name as SubTypeObj@
<Type>: Type : elementType "[" "]" as ArrayTypeObj@
END STATE Type.5
    TOKEN-FINISH => Type.RootEnd

<Type>: Type : parentType "."@ NAME : name as SubTypeObj
STATE Type.7
    [NAME] => Type.1
        ASSIGN name
        CREATE SubTypeObj

<Type>: Type : elementType "["@ "]" as ArrayTypeObj
STATE Type.8
    [OPTCLOSE "]"] => Type.1
        CREATE ArrayTypeObj

$<Type> @
STATE Type.RootEnd

--------------------------------
@ $<EnumMember>
STATE EnumMember.RootStart
    TOKEN-BEGIN => EnumMember.Start

@ <EnumMember>
STATE EnumMember.Start
    [NAME] => EnumMember.1
        ASSIGN name

<EnumMember>: NAME : name@ [ Attribute : attributes { "," Attribute : attributes } ] "," as EnumMemberDef
STATE EnumMember.1
    [COMMA ","] => EnumMember.3
    <Attribute> => EnumMember.2
        ASSIGN attributes

<EnumMember>: NAME : name [ Attribute : attributes { "," Attribute : attributes } ] "," as EnumMemberDef@
STATE EnumMember.3
    EPSILON => EnumMember.5
        CREATE EnumMemberDef

<EnumMember>: NAME : name [ Attribute : attributes@ { "," Attribute : attributes } ] "," as EnumMemberDef
<EnumMember>: NAME : name [ Attribute : attributes @{ "," Attribute : attributes } ] "," as EnumMemberDef
STATE EnumMember.2
    [COMMA ","] => EnumMember.3
    [COMMA ","] => EnumMember.4

<EnumMember>: NAME : name [ Attribute : attributes { "," Attribute : attributes } ] "," as EnumMemberDef@
END STATE EnumMember.5
    TOKEN-FINISH => EnumMember.RootEnd

<EnumMember>: NAME : name [ Attribute : attributes { ","@ Attribute : attributes } ] "," as EnumMemberDef
STATE EnumMember.4
    <Attribute> => EnumMember.2
        ASSIGN attributes

$<EnumMember> @
STATE EnumMember.RootEnd

--------------------------------
@ $<Enum>
STATE Enum.RootStart
    TOKEN-BEGIN => Enum.Start

@ <Enum>
STATE Enum.Start
    [ENUM "enum"] => Enum.1

<Enum>: "enum"@ NAME : name [ Attribute : attributes { "," Attribute : attributes } ] "{" { EnumMember : members } "}" as EnumTypeDef
STATE Enum.1
    [NAME] => Enum.2
        ASSIGN name

<Enum>: "enum" NAME : name@ [ Attribute : attributes { "," Attribute : attributes } ] "{" { EnumMember : members } "}" as EnumTypeDef
STATE Enum.2
    [OPEN "{"] => Enum.4
    <Attribute> => Enum.3
        ASSIGN attributes

<Enum>: "enum" NAME : name [ Attribute : attributes { "," Attribute : attributes } ] "{"@ { EnumMember : members } "}" as EnumTypeDef
<Enum>: "enum" NAME : name [ Attribute : attributes { "," Attribute : attributes } ] "{" @{ EnumMember : members } "}" as EnumTypeDef
STATE Enum.4
    [CLOSE "}"] => Enum.6
    <EnumMember> => Enum.4
        ASSIGN members

<Enum>: "enum" NAME : name [ Attribute : attributes@ { "," Attribute : attributes } ] "{" { EnumMember : members } "}" as EnumTypeDef
<Enum>: "enum" NAME : name [ Attribute : attributes @{ "," Attribute : attributes } ] "{" { EnumMember : members } "}" as EnumTypeDef
STATE Enum.3
    [COMMA ","] => Enum.5
    [OPEN "{"] => Enum.4

<Enum>: "enum" NAME : name [ Attribute : attributes { "," Attribute : attributes } ] "{" { EnumMember : members } "}" as EnumTypeDef@
STATE Enum.6
    EPSILON => Enum.9
        CREATE EnumTypeDef

<Enum>: "enum" NAME : name [ Attribute : attributes { ","@ Attribute : attributes } ] "{" { EnumMember : members } "}" as EnumTypeDef
STATE Enum.5
    <Attribute> => Enum.3
        ASSIGN attributes

<Enum>: "enum" NAME : name [ Attribute : attributes { "," Attribute : attributes } ] "{" { EnumMember : members } "}" as EnumTypeDef@
END STATE Enum.9
    TOKEN-FINISH => Enum.RootEnd

$<Enum> @
STATE Enum.RootEnd

--------------------------------
@ $<ClassMember>
STATE ClassMember.RootStart
    TOKEN-BEGIN => ClassMember.Start

@ <ClassMember>
STATE ClassMember.Start
    <Type> => ClassMember.1
        ASSIGN type

<ClassMember>: Type : type@ NAME : name [ "(" NAME : unescapingFunction ")" ] [ Attribute : attributes { "," Attribute : attributes } ] ";" as ClassMemberDef
STATE ClassMember.1
    [NAME] => ClassMember.2
        ASSIGN name

<ClassMember>: Type : type NAME : name@ [ "(" NAME : unescapingFunction ")" ] [ Attribute : attributes { "," Attribute : attributes } ] ";" as ClassMemberDef
STATE ClassMember.2
    [PREOPEN "("] => ClassMember.3
    [SEMICOLON ";"] => ClassMember.5
    <Attribute> => ClassMember.4
        ASSIGN attributes

<ClassMember>: Type : type NAME : name [ "("@ NAME : unescapingFunction ")" ] [ Attribute : attributes { "," Attribute : attributes } ] ";" as ClassMemberDef
STATE ClassMember.3
    [NAME] => ClassMember.6
        ASSIGN unescapingFunction

<ClassMember>: Type : type NAME : name [ "(" NAME : unescapingFunction ")" ] [ Attribute : attributes { "," Attribute : attributes } ] ";" as ClassMemberDef@
STATE ClassMember.5
    EPSILON => ClassMember.8
        CREATE ClassMemberDef

<ClassMember>: Type : type NAME : name [ "(" NAME : unescapingFunction ")" ] [ Attribute : attributes@ { "," Attribute : attributes } ] ";" as ClassMemberDef
<ClassMember>: Type : type NAME : name [ "(" NAME : unescapingFunction ")" ] [ Attribute : attributes @{ "," Attribute : attributes } ] ";" as ClassMemberDef
STATE ClassMember.4
    [COMMA ","] => ClassMember.7
    [SEMICOLON ";"] => ClassMember.5

<ClassMember>: Type : type NAME : name [ "(" NAME : unescapingFunction@ ")" ] [ Attribute : attributes { "," Attribute : attributes } ] ";" as ClassMemberDef
STATE ClassMember.6
    [PRECLOSE ")"] => ClassMember.9

<ClassMember>: Type : type NAME : name [ "(" NAME : unescapingFunction ")" ] [ Attribute : attributes { "," Attribute : attributes } ] ";" as ClassMemberDef@
END STATE ClassMember.8
    TOKEN-FINISH => ClassMember.RootEnd

<ClassMember>: Type : type NAME : name [ "(" NAME : unescapingFunction ")" ] [ Attribute : attributes { ","@ Attribute : attributes } ] ";" as ClassMemberDef
STATE ClassMember.7
    <Attribute> => ClassMember.4
        ASSIGN attributes

<ClassMember>: Type : type NAME : name [ "(" NAME : unescapingFunction ")" ]@ [ Attribute : attributes { "," Attribute : attributes } ] ";" as ClassMemberDef
STATE ClassMember.9
    [SEMICOLON ";"] => ClassMember.5
    <Attribute> => ClassMember.4
        ASSIGN attributes

$<ClassMember> @
STATE ClassMember.RootEnd

--------------------------------
@ $<Class>
STATE Class.RootStart
    TOKEN-BEGIN => Class.Start

@ <Class>
STATE Class.Start
    [CLASS "class"] => Class.1

<Class>: "class"@ NAME : name [ "ambiguous" "(" Type : ambiguousType ")" ] [ ":" Type : parentType ] [ Attribute : attributes { "," Attribute : attributes } ] "{" { ClassMember : members | TypeDecl : subTypes } "}" as ClassTypeDef
STATE Class.1
    [NAME] => Class.2
        ASSIGN name

<Class>: "class" NAME : name@ [ "ambiguous" "(" Type : ambiguousType ")" ] [ ":" Type : parentType ] [ Attribute : attributes { "," Attribute : attributes } ] "{" { ClassMember : members | TypeDecl : subTypes } "}" as ClassTypeDef
STATE Class.2
    [AMBIGUOUS "ambiguous"] => Class.3
    [COLON ":"] => Class.4
    [OPEN "{"] => Class.6
    <Attribute> => Class.5
        ASSIGN attributes

<Class>: "class" NAME : name [ "ambiguous"@ "(" Type : ambiguousType ")" ] [ ":" Type : parentType ] [ Attribute : attributes { "," Attribute : attributes } ] "{" { ClassMember : members | TypeDecl : subTypes } "}" as ClassTypeDef
STATE Class.3
    [PREOPEN "("] => Class.7

<Class>: "class" NAME : name [ "ambiguous" "(" Type : ambiguousType ")" ] [ ":"@ Type : parentType ] [ Attribute : attributes { "," Attribute : attributes } ] "{" { ClassMember : members | TypeDecl : subTypes } "}" as ClassTypeDef
STATE Class.4
    <Type> => Class.8
        ASSIGN parentType

<Class>: "class" NAME : name [ "ambiguous" "(" Type : ambiguousType ")" ] [ ":" Type : parentType ] [ Attribute : attributes { "," Attribute : attributes } ] "{"@ { ClassMember : members | TypeDecl : subTypes } "}" as ClassTypeDef
<Class>: "class" NAME : name [ "ambiguous" "(" Type : ambiguousType ")" ] [ ":" Type : parentType ] [ Attribute : attributes { "," Attribute : attributes } ] "{" @{ ClassMember : members | TypeDecl : subTypes } "}" as ClassTypeDef
STATE Class.6
    [CLOSE "}"] => Class.10
    <ClassMember> => Class.6
        ASSIGN members
    <TypeDecl> => Class.6
        ASSIGN subTypes

<Class>: "class" NAME : name [ "ambiguous" "(" Type : ambiguousType ")" ] [ ":" Type : parentType ] [ Attribute : attributes@ { "," Attribute : attributes } ] "{" { ClassMember : members | TypeDecl : subTypes } "}" as ClassTypeDef
<Class>: "class" NAME : name [ "ambiguous" "(" Type : ambiguousType ")" ] [ ":" Type : parentType ] [ Attribute : attributes @{ "," Attribute : attributes } ] "{" { ClassMember : members | TypeDecl : subTypes } "}" as ClassTypeDef
STATE Class.5
    [COMMA ","] => Class.9
    [OPEN "{"] => Class.6

<Class>: "class" NAME : name [ "ambiguous" "("@ Type : ambiguousType ")" ] [ ":" Type : parentType ] [ Attribute : attributes { "," Attribute : attributes } ] "{" { ClassMember : members | TypeDecl : subTypes } "}" as ClassTypeDef
STATE Class.7
    <Type> => Class.12
        ASSIGN ambiguousType

<Class>: "class" NAME : name [ "ambiguous" "(" Type : ambiguousType ")" ] [ ":" Type : parentType ]@ [ Attribute : attributes { "," Attribute : attributes } ] "{" { ClassMember : members | TypeDecl : subTypes } "}" as ClassTypeDef
STATE Class.8
    [OPEN "{"] => Class.6
    <Attribute> => Class.5
        ASSIGN attributes

<Class>: "class" NAME : name [ "ambiguous" "(" Type : ambiguousType ")" ] [ ":" Type : parentType ] [ Attribute : attributes { "," Attribute : attributes } ] "{" { ClassMember : members | TypeDecl : subTypes } "}" as ClassTypeDef@
STATE Class.10
    EPSILON => Class.14
        CREATE ClassTypeDef

<Class>: "class" NAME : name [ "ambiguous" "(" Type : ambiguousType ")" ] [ ":" Type : parentType ] [ Attribute : attributes { ","@ Attribute : attributes } ] "{" { ClassMember : members | TypeDecl : subTypes } "}" as ClassTypeDef
STATE Class.9
    <Attribute> => Class.5
        ASSIGN attributes

<Class>: "class" NAME : name [ "ambiguous" "(" Type : ambiguousType@ ")" ] [ ":" Type : parentType ] [ Attribute : attributes { "," Attribute : attributes } ] "{" { ClassMember : members | TypeDecl : subTypes } "}" as ClassTypeDef
STATE Class.12
    [PRECLOSE ")"] => Class.15

<Class>: "class" NAME : name [ "ambiguous" "(" Type : ambiguousType ")" ] [ ":" Type : parentType ] [ Attribute : attributes { "," Attribute : attributes } ] "{" { ClassMember : members | TypeDecl : subTypes } "}" as ClassTypeDef@
END STATE Class.14
    TOKEN-FINISH => Class.RootEnd

<Class>: "class" NAME : name [ "ambiguous" "(" Type : ambiguousType ")" ]@ [ ":" Type : parentType ] [ Attribute : attributes { "," Attribute : attributes } ] "{" { ClassMember : members | TypeDecl : subTypes } "}" as ClassTypeDef
STATE Class.15
    [COLON ":"] => Class.4
    [OPEN "{"] => Class.6
    <Attribute> => Class.5
        ASSIGN attributes

$<Class> @
STATE Class.RootEnd

--------------------------------
@ $<TypeDecl>
STATE TypeDecl.RootStart
    TOKEN-BEGIN => TypeDecl.Start

@ <TypeDecl>
STATE TypeDecl.Start
    <Enum> => TypeDecl.1
        USING 
    <Class> => TypeDecl.1
        USING 

<TypeDecl>: !Enum | !Class@
END STATE TypeDecl.1
    TOKEN-FINISH => TypeDecl.RootEnd

$<TypeDecl> @
STATE TypeDecl.RootEnd

--------------------------------
@ $<PrimitiveGrammar>
STATE PrimitiveGrammar.RootStart
    TOKEN-BEGIN => PrimitiveGrammar.Start

@ <PrimitiveGrammar>
STATE PrimitiveGrammar.Start
    [NAME] => PrimitiveGrammar.1
        ASSIGN name
        CREATE PrimitiveGrammarDef
    [STRING] => PrimitiveGrammar.1
        ASSIGN text
        CREATE TextGrammarDef
    <PrimitiveGrammar> => PrimitiveGrammar.3
        ASSIGN grammar
    [USING "!"] => PrimitiveGrammar.4
    [OPTOPEN "["] => PrimitiveGrammar.5
    [OPEN "{"] => PrimitiveGrammar.6
    [PREOPEN "("] => PrimitiveGrammar.7

<PrimitiveGrammar>: NAME : name as PrimitiveGrammarDef@
<PrimitiveGrammar>: STRING : text as TextGrammarDef@
<PrimitiveGrammar>: PrimitiveGrammar : grammar ":" NAME : memberName as AssignGrammarDef@
<PrimitiveGrammar>: "!" PrimitiveGrammar : grammar as UseGrammarDef@
<PrimitiveGrammar>: "[" Grammar : grammar "]" as OptionalGrammarDef@
<PrimitiveGrammar>: "{" Grammar : grammar "}" as LoopGrammarDef@
STATE PrimitiveGrammar.1
    EPSILON => PrimitiveGrammar.8

<PrimitiveGrammar>: PrimitiveGrammar : grammar@ ":" NAME : memberName as AssignGrammarDef
STATE PrimitiveGrammar.3
    [COLON ":"] => PrimitiveGrammar.10

<PrimitiveGrammar>: "!"@ PrimitiveGrammar : grammar as UseGrammarDef
STATE PrimitiveGrammar.4
    <PrimitiveGrammar> => PrimitiveGrammar.1
        ASSIGN grammar
        CREATE UseGrammarDef

<PrimitiveGrammar>: "["@ Grammar : grammar "]" as OptionalGrammarDef
STATE PrimitiveGrammar.5
    <Grammar> => PrimitiveGrammar.12
        ASSIGN grammar

<PrimitiveGrammar>: "{"@ Grammar : grammar "}" as LoopGrammarDef
STATE PrimitiveGrammar.6
    <Grammar> => PrimitiveGrammar.13
        ASSIGN grammar

<PrimitiveGrammar>: "("@ !Grammar ")"
STATE PrimitiveGrammar.7
    <Grammar> => PrimitiveGrammar.14
        USING 

<PrimitiveGrammar>: NAME : name as PrimitiveGrammarDef@
<PrimitiveGrammar>: STRING : text as TextGrammarDef@
<PrimitiveGrammar>: PrimitiveGrammar : grammar ":" NAME : memberName as AssignGrammarDef@
<PrimitiveGrammar>: "!" PrimitiveGrammar : grammar as UseGrammarDef@
<PrimitiveGrammar>: "[" Grammar : grammar "]" as OptionalGrammarDef@
<PrimitiveGrammar>: "{" Grammar : grammar "}" as LoopGrammarDef@
<PrimitiveGrammar>: "(" !Grammar ")"@
END STATE PrimitiveGrammar.8
    TOKEN-FINISH => PrimitiveGrammar.RootEnd

<PrimitiveGrammar>: PrimitiveGrammar : grammar ":"@ NAME : memberName as AssignGrammarDef
STATE PrimitiveGrammar.10
    [NAME] => PrimitiveGrammar.1
        ASSIGN memberName
        CREATE AssignGrammarDef

<PrimitiveGrammar>: "[" Grammar : grammar@ "]" as OptionalGrammarDef
STATE PrimitiveGrammar.12
    [OPTCLOSE "]"] => PrimitiveGrammar.1
        CREATE OptionalGrammarDef

<PrimitiveGrammar>: "{" Grammar : grammar@ "}" as LoopGrammarDef
STATE PrimitiveGrammar.13
    [CLOSE "}"] => PrimitiveGrammar.1
        CREATE LoopGrammarDef

<PrimitiveGrammar>: "(" !Grammar@ ")"
STATE PrimitiveGrammar.14
    [PRECLOSE ")"] => PrimitiveGrammar.8

$<PrimitiveGrammar> @
STATE PrimitiveGrammar.RootEnd

--------------------------------
@ $<SequenceGrammar>
STATE SequenceGrammar.RootStart
    TOKEN-BEGIN => SequenceGrammar.Start

@ <SequenceGrammar>
STATE SequenceGrammar.Start
    <PrimitiveGrammar> => SequenceGrammar.1
        USING 
    <SequenceGrammar> => SequenceGrammar.2
        ASSIGN first

<SequenceGrammar>: !PrimitiveGrammar@
<SequenceGrammar>: SequenceGrammar : first PrimitiveGrammar : second as SequenceGrammarDef@
END STATE SequenceGrammar.1
    TOKEN-FINISH => SequenceGrammar.RootEnd

<SequenceGrammar>: SequenceGrammar : first@ PrimitiveGrammar : second as SequenceGrammarDef
STATE SequenceGrammar.2
    <PrimitiveGrammar> => SequenceGrammar.3
        ASSIGN second

$<SequenceGrammar> @
STATE SequenceGrammar.RootEnd

<SequenceGrammar>: SequenceGrammar : first PrimitiveGrammar : second as SequenceGrammarDef@
STATE SequenceGrammar.3
    EPSILON => SequenceGrammar.1
        CREATE SequenceGrammarDef

--------------------------------
@ $<AlternativeGrammar>
STATE AlternativeGrammar.RootStart
    TOKEN-BEGIN => AlternativeGrammar.Start

@ <AlternativeGrammar>
STATE AlternativeGrammar.Start
    <SequenceGrammar> => AlternativeGrammar.1
        USING 
    <AlternativeGrammar> => AlternativeGrammar.2
        ASSIGN first

<AlternativeGrammar>: !SequenceGrammar@
<AlternativeGrammar>: AlternativeGrammar : first "|" SequenceGrammar : second as AlternativeGrammarDef@
END STATE AlternativeGrammar.1
    TOKEN-FINISH => AlternativeGrammar.RootEnd

<AlternativeGrammar>: AlternativeGrammar : first@ "|" SequenceGrammar : second as AlternativeGrammarDef
STATE AlternativeGrammar.2
    [OR "|"] => AlternativeGrammar.3

$<AlternativeGrammar> @
STATE AlternativeGrammar.RootEnd

<AlternativeGrammar>: AlternativeGrammar : first "|"@ SequenceGrammar : second as AlternativeGrammarDef
STATE AlternativeGrammar.3
    <SequenceGrammar> => AlternativeGrammar.4
        ASSIGN second

<AlternativeGrammar>: AlternativeGrammar : first "|" SequenceGrammar : second as AlternativeGrammarDef@
STATE AlternativeGrammar.4
    EPSILON => AlternativeGrammar.1
        CREATE AlternativeGrammarDef

--------------------------------
@ $<Grammar>
STATE Grammar.RootStart
    TOKEN-BEGIN => Grammar.Start

@ <Grammar>
STATE Grammar.Start
    <AlternativeGrammar> => Grammar.1
        USING 
    <Grammar> => Grammar.2
        ASSIGN grammar
    <Grammar> => Grammar.3
        ASSIGN grammar

<Grammar>: !AlternativeGrammar@
<Grammar>: Grammar : grammar "as" Type : type as CreateGrammarDef@
<Grammar>: Grammar : grammar "with" "{" NAME : memberName "=" STRING : value "}" as SetterGrammarDef@
END STATE Grammar.1
    TOKEN-FINISH => Grammar.RootEnd

<Grammar>: Grammar : grammar@ "as" Type : type as CreateGrammarDef
STATE Grammar.2
    [AS "as"] => Grammar.4

<Grammar>: Grammar : grammar@ "with" "{" NAME : memberName "=" STRING : value "}" as SetterGrammarDef
STATE Grammar.3
    [WITH "with"] => Grammar.5

$<Grammar> @
STATE Grammar.RootEnd

<Grammar>: Grammar : grammar "as"@ Type : type as CreateGrammarDef
STATE Grammar.4
    <Type> => Grammar.6
        ASSIGN type
        CREATE CreateGrammarDef

<Grammar>: Grammar : grammar "with"@ "{" NAME : memberName "=" STRING : value "}" as SetterGrammarDef
STATE Grammar.5
    [OPEN "{"] => Grammar.7

<Grammar>: Grammar : grammar "as" Type : type as CreateGrammarDef@
<Grammar>: Grammar : grammar "with" "{" NAME : memberName "=" STRING : value "}" as SetterGrammarDef@
STATE Grammar.6
    EPSILON => Grammar.1

<Grammar>: Grammar : grammar "with" "{"@ NAME : memberName "=" STRING : value "}" as SetterGrammarDef
STATE Grammar.7
    [NAME] => Grammar.9
        ASSIGN memberName

<Grammar>: Grammar : grammar "with" "{" NAME : memberName@ "=" STRING : value "}" as SetterGrammarDef
STATE Grammar.9
    [ASSIGN "="] => Grammar.10

<Grammar>: Grammar : grammar "with" "{" NAME : memberName "="@ STRING : value "}" as SetterGrammarDef
STATE Grammar.10
    [STRING] => Grammar.11
        ASSIGN value

<Grammar>: Grammar : grammar "with" "{" NAME : memberName "=" STRING : value@ "}" as SetterGrammarDef
STATE Grammar.11
    [CLOSE "}"] => Grammar.6
        CREATE SetterGrammarDef

--------------------------------
@ $<TokenDecl>
STATE TokenDecl.RootStart
    TOKEN-BEGIN => TokenDecl.Start

@ <TokenDecl>
STATE TokenDecl.Start
    [TOKEN "token"] => TokenDecl.1
    [DISCARDTOKEN "discardtoken"] => TokenDecl.2

<TokenDecl>: "token"@ NAME : name "=" STRING : regex [ Attribute : attributes { "," Attribute : attributes } ] ";" as TokenDef with { discard = "KeepToken" }
STATE TokenDecl.1
    [NAME] => TokenDecl.3
        ASSIGN name

<TokenDecl>: "discardtoken"@ NAME : name "=" STRING : regex ";" as TokenDef with { discard = "DiscardToken" }
STATE TokenDecl.2
    [NAME] => TokenDecl.4
        ASSIGN name

<TokenDecl>: "token" NAME : name@ "=" STRING : regex [ Attribute : attributes { "," Attribute : attributes } ] ";" as TokenDef with { discard = "KeepToken" }
STATE TokenDecl.3
    [ASSIGN "="] => TokenDecl.5

<TokenDecl>: "discardtoken" NAME : name@ "=" STRING : regex ";" as TokenDef with { discard = "DiscardToken" }
STATE TokenDecl.4
    [ASSIGN "="] => TokenDecl.6

<TokenDecl>: "token" NAME : name "="@ STRING : regex [ Attribute : attributes { "," Attribute : attributes } ] ";" as TokenDef with { discard = "KeepToken" }
STATE TokenDecl.5
    [STRING] => TokenDecl.7
        ASSIGN regex

<TokenDecl>: "discardtoken" NAME : name "="@ STRING : regex ";" as TokenDef with { discard = "DiscardToken" }
STATE TokenDecl.6
    [STRING] => TokenDecl.8
        ASSIGN regex

<TokenDecl>: "token" NAME : name "=" STRING : regex@ [ Attribute : attributes { "," Attribute : attributes } ] ";" as TokenDef with { discard = "KeepToken" }
STATE TokenDecl.7
    [SEMICOLON ";"] => TokenDecl.10
        SET discard => KeepToken
        CREATE TokenDef
    <Attribute> => TokenDecl.9
        ASSIGN attributes

<TokenDecl>: "discardtoken" NAME : name "=" STRING : regex@ ";" as TokenDef with { discard = "DiscardToken" }
STATE TokenDecl.8
    [SEMICOLON ";"] => TokenDecl.10
        SET discard => DiscardToken
        CREATE TokenDef

<TokenDecl>: "token" NAME : name "=" STRING : regex [ Attribute : attributes { "," Attribute : attributes } ] ";" as TokenDef@ with { discard = "KeepToken" }
<TokenDecl>: "discardtoken" NAME : name "=" STRING : regex ";" as TokenDef@ with { discard = "DiscardToken" }
STATE TokenDecl.10
    EPSILON => TokenDecl.13

<TokenDecl>: "token" NAME : name "=" STRING : regex [ Attribute : attributes@ { "," Attribute : attributes } ] ";" as TokenDef with { discard = "KeepToken" }
<TokenDecl>: "token" NAME : name "=" STRING : regex [ Attribute : attributes @{ "," Attribute : attributes } ] ";" as TokenDef with { discard = "KeepToken" }
STATE TokenDecl.9
    [COMMA ","] => TokenDecl.12
    [SEMICOLON ";"] => TokenDecl.10
        SET discard => KeepToken
        CREATE TokenDef

<TokenDecl>: "token" NAME : name "=" STRING : regex [ Attribute : attributes { "," Attribute : attributes } ] ";" as TokenDef with { discard = "KeepToken" }@
<TokenDecl>: "discardtoken" NAME : name "=" STRING : regex ";" as TokenDef with { discard = "DiscardToken" }@
END STATE TokenDecl.13
    TOKEN-FINISH => TokenDecl.RootEnd

<TokenDecl>: "token" NAME : name "=" STRING : regex [ Attribute : attributes { ","@ Attribute : attributes } ] ";" as TokenDef with { discard = "KeepToken" }
STATE TokenDecl.12
    <Attribute> => TokenDecl.9
        ASSIGN attributes

$<TokenDecl> @
STATE TokenDecl.RootEnd

--------------------------------
@ $<RuleDecl>
STATE RuleDecl.RootStart
    TOKEN-BEGIN => RuleDecl.Start

@ <RuleDecl>
STATE RuleDecl.Start
    [RULE "rule"] => RuleDecl.1

<RuleDecl>: "rule"@ Type : type NAME : name [ Attribute : attributes { "," Attribute : attributes } ] { "=" Grammar : grammars } ";" as RuleDef
STATE RuleDecl.1
    <Type> => RuleDecl.2
        ASSIGN type

<RuleDecl>: "rule" Type : type@ NAME : name [ Attribute : attributes { "," Attribute : attributes } ] { "=" Grammar : grammars } ";" as RuleDef
STATE RuleDecl.2
    [NAME] => RuleDecl.3
        ASSIGN name

<RuleDecl>: "rule" Type : type NAME : name@ [ Attribute : attributes { "," Attribute : attributes } ] { "=" Grammar : grammars } ";" as RuleDef
STATE RuleDecl.3
    [ASSIGN "="] => RuleDecl.6
    [SEMICOLON ";"] => RuleDecl.5
    <Attribute> => RuleDecl.4
        ASSIGN attributes

<RuleDecl>: "rule" Type : type NAME : name [ Attribute : attributes { "," Attribute : attributes } ] { "="@ Grammar : grammars } ";" as RuleDef
STATE RuleDecl.6
    <Grammar> => RuleDecl.9
        ASSIGN grammars

<RuleDecl>: "rule" Type : type NAME : name [ Attribute : attributes { "," Attribute : attributes } ] { "=" Grammar : grammars } ";" as RuleDef@
STATE RuleDecl.5
    EPSILON => RuleDecl.8
        CREATE RuleDef

<RuleDecl>: "rule" Type : type NAME : name [ Attribute : attributes@ { "," Attribute : attributes } ] { "=" Grammar : grammars } ";" as RuleDef
<RuleDecl>: "rule" Type : type NAME : name [ Attribute : attributes @{ "," Attribute : attributes } ] { "=" Grammar : grammars } ";" as RuleDef
STATE RuleDecl.4
    [ASSIGN "="] => RuleDecl.6
    [COMMA ","] => RuleDecl.7
    [SEMICOLON ";"] => RuleDecl.5

<RuleDecl>: "rule" Type : type NAME : name [ Attribute : attributes { "," Attribute : attributes } ] @{ "=" Grammar : grammars } ";" as RuleDef
STATE RuleDecl.9
    [ASSIGN "="] => RuleDecl.6
    [SEMICOLON ";"] => RuleDecl.5

<RuleDecl>: "rule" Type : type NAME : name [ Attribute : attributes { "," Attribute : attributes } ] { "=" Grammar : grammars } ";" as RuleDef@
END STATE RuleDecl.8
    TOKEN-FINISH => RuleDecl.RootEnd

<RuleDecl>: "rule" Type : type NAME : name [ Attribute : attributes { ","@ Attribute : attributes } ] { "=" Grammar : grammars } ";" as RuleDef
STATE RuleDecl.7
    <Attribute> => RuleDecl.4
        ASSIGN attributes

$<RuleDecl> @
STATE RuleDecl.RootEnd

--------------------------------
@ $<ParserDecl>
STATE ParserDecl.RootStart
    TOKEN-BEGIN => ParserDecl.Start

@ <ParserDecl>
STATE ParserDecl.Start
    <TypeDecl> => ParserDecl.1
        ASSIGN definitions
    <TokenDecl> => ParserDecl.1
        ASSIGN definitions
    <RuleDecl> => ParserDecl.1
        ASSIGN definitions

<ParserDecl>: { TypeDecl : definitions | TokenDecl : definitions | RuleDecl : definitions } ( TypeDecl : definitions | TokenDecl : definitions | RuleDecl : definitions ) as ParserDef@
<ParserDecl>: @{ TypeDecl : definitions | TokenDecl : definitions | RuleDecl : definitions } ( TypeDecl : definitions | TokenDecl : definitions | RuleDecl : definitions ) as ParserDef
STATE ParserDecl.1
    EPSILON => ParserDecl.3
        CREATE ParserDef
    <TypeDecl> => ParserDecl.1
        ASSIGN definitions
    <TokenDecl> => ParserDecl.1
        ASSIGN definitions
    <RuleDecl> => ParserDecl.1
        ASSIGN definitions

<ParserDecl>: { TypeDecl : definitions | TokenDecl : definitions | RuleDecl : definitions } ( TypeDecl : definitions | TokenDecl : definitions | RuleDecl : definitions ) as ParserDef@
END STATE ParserDecl.3
    TOKEN-FINISH => ParserDecl.RootEnd

$<ParserDecl> @
STATE ParserDecl.RootEnd

--------------------------------
