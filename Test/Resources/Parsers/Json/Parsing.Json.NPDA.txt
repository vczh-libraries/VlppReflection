=============================================================
Non-deterministic PDA
=============================================================
Root Rule Start: JLiteral.RootStart
Root Rule End: JLiteral.RootEnd
Rule Start: JLiteral.Start
Rule End: JLiteral.6

Root Rule Start: JField.RootStart
Root Rule End: JField.RootEnd
Rule Start: JField.Start
Rule End: JField.4

Root Rule Start: JObject.RootStart
Root Rule End: JObject.RootEnd
Rule Start: JObject.Start
Rule End: JObject.5

Root Rule Start: JArray.RootStart
Root Rule End: JArray.RootEnd
Rule Start: JArray.Start
Rule End: JArray.5

Root Rule Start: JValue.RootStart
Root Rule End: JValue.RootEnd
Rule Start: JValue.Start
Rule End: JValue.1

Root Rule Start: JRoot.RootStart
Root Rule End: JRoot.RootEnd
Rule Start: JRoot.Start
Rule End: JRoot.1

@ $<JLiteral>
STATE JLiteral.RootStart
    TOKEN-BEGIN => JLiteral.Start

@ <JLiteral>
STATE JLiteral.Start
    [STRING] => JLiteral.1
        ASSIGN content
        CREATE String
    [NUMBER] => JLiteral.1
        ASSIGN content
        CREATE Number
    [TRUEVALUE "true"] => JLiteral.1
        SET value => True
        CREATE Literal
    [FALSEVALUE "false"] => JLiteral.1
        SET value => False
        CREATE Literal
    [NULLVALUE "null"] => JLiteral.1
        SET value => Null
        CREATE Literal

<JLiteral>: STRING : content as String@
<JLiteral>: NUMBER : content as Number@
<JLiteral>: "true" as Literal@ with { value = "True" }
<JLiteral>: "false" as Literal@ with { value = "False" }
<JLiteral>: "null" as Literal@ with { value = "Null" }
STATE JLiteral.1
    EPSILON => JLiteral.6

<JLiteral>: STRING : content as String@
<JLiteral>: NUMBER : content as Number@
<JLiteral>: "true" as Literal with { value = "True" }@
<JLiteral>: "false" as Literal with { value = "False" }@
<JLiteral>: "null" as Literal with { value = "Null" }@
END STATE JLiteral.6
    TOKEN-FINISH => JLiteral.RootEnd

$<JLiteral> @
STATE JLiteral.RootEnd

--------------------------------
@ $<JField>
STATE JField.RootStart
    TOKEN-BEGIN => JField.Start

@ <JField>
STATE JField.Start
    [STRING] => JField.1
        ASSIGN name

<JField>: STRING : name@ ":" JValue : value as ObjectField
STATE JField.1
    [COLON ":"] => JField.2

<JField>: STRING : name ":"@ JValue : value as ObjectField
STATE JField.2
    <JValue> => JField.3
        ASSIGN value

<JField>: STRING : name ":" JValue : value as ObjectField@
STATE JField.3
    EPSILON => JField.4
        CREATE ObjectField

<JField>: STRING : name ":" JValue : value as ObjectField@
END STATE JField.4
    TOKEN-FINISH => JField.RootEnd

$<JField> @
STATE JField.RootEnd

--------------------------------
@ $<JObject>
STATE JObject.RootStart
    TOKEN-BEGIN => JObject.Start

@ <JObject>
STATE JObject.Start
    [OBJOPEN "{"] => JObject.1

<JObject>: "{"@ [ JField : fields { "," JField : fields } ] "}" as Object
STATE JObject.1
    [OBJCLOSE "}"] => JObject.3
    <JField> => JObject.2
        ASSIGN fields

<JObject>: "{" [ JField : fields { "," JField : fields } ] "}" as Object@
STATE JObject.3
    EPSILON => JObject.5
        CREATE Object

<JObject>: "{" [ JField : fields@ { "," JField : fields } ] "}" as Object
<JObject>: "{" [ JField : fields @{ "," JField : fields } ] "}" as Object
STATE JObject.2
    [COMMA ","] => JObject.4
    [OBJCLOSE "}"] => JObject.3

<JObject>: "{" [ JField : fields { "," JField : fields } ] "}" as Object@
END STATE JObject.5
    TOKEN-FINISH => JObject.RootEnd

<JObject>: "{" [ JField : fields { ","@ JField : fields } ] "}" as Object
STATE JObject.4
    <JField> => JObject.2
        ASSIGN fields

$<JObject> @
STATE JObject.RootEnd

--------------------------------
@ $<JArray>
STATE JArray.RootStart
    TOKEN-BEGIN => JArray.Start

@ <JArray>
STATE JArray.Start
    [ARROPEN "["] => JArray.1

<JArray>: "["@ [ JValue : items { "," JValue : items } ] "]" as Array
STATE JArray.1
    [ARRCLOSE "]"] => JArray.3
    <JValue> => JArray.2
        ASSIGN items

<JArray>: "[" [ JValue : items { "," JValue : items } ] "]" as Array@
STATE JArray.3
    EPSILON => JArray.5
        CREATE Array

<JArray>: "[" [ JValue : items@ { "," JValue : items } ] "]" as Array
<JArray>: "[" [ JValue : items @{ "," JValue : items } ] "]" as Array
STATE JArray.2
    [ARRCLOSE "]"] => JArray.3
    [COMMA ","] => JArray.4

<JArray>: "[" [ JValue : items { "," JValue : items } ] "]" as Array@
END STATE JArray.5
    TOKEN-FINISH => JArray.RootEnd

<JArray>: "[" [ JValue : items { ","@ JValue : items } ] "]" as Array
STATE JArray.4
    <JValue> => JArray.2
        ASSIGN items

$<JArray> @
STATE JArray.RootEnd

--------------------------------
@ $<JValue>
STATE JValue.RootStart
    TOKEN-BEGIN => JValue.Start

@ <JValue>
STATE JValue.Start
    <JLiteral> => JValue.1
        USING 
    <JObject> => JValue.1
        USING 
    <JArray> => JValue.1
        USING 

<JValue>: !JLiteral@
<JValue>: !JObject@
<JValue>: !JArray@
END STATE JValue.1
    TOKEN-FINISH => JValue.RootEnd

$<JValue> @
STATE JValue.RootEnd

--------------------------------
@ $<JRoot>
STATE JRoot.RootStart
    TOKEN-BEGIN => JRoot.Start

@ <JRoot>
STATE JRoot.Start
    <JObject> => JRoot.1
        USING 
    <JArray> => JRoot.1
        USING 

<JRoot>: !JObject@
<JRoot>: !JArray@
END STATE JRoot.1
    TOKEN-FINISH => JRoot.RootEnd

$<JRoot> @
STATE JRoot.RootEnd

--------------------------------
