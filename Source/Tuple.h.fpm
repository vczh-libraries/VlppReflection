$$include:Common.fpm

$$define $TYPENAME_NULL($index) typename T$index = TupleNullItem
$$define $TUPLE_ITEM($index) T$index f$index;
$$define $TUPLE_COMPARE($index) if (a.f$index < b.f$index) return -1; else if (a.f$index > b.f$index) return 1;
$$define $TUPLE_ASSIGN($index) f$index$(()p$index$())

$$define $TUPLE_DECLARATION($count) $$begin
$(/)***********************************************************************
vl::Tuple<$TYPE_LIST($count)>
***********************************************************************$(/)
	template<$loopsep($count,0,$TYPENAME_ITEM,$(,))>
	class Tuple<$TYPE_LIST($count)> : public Object
	{
	public:
		$loop($count,0,$TUPLE_ITEM)
$( )
		Tuple()
		{
		}
$( )
		Tuple($PARAMETER_LIST($count))
			:$loopsep($count,0,$TUPLE_ASSIGN,$(,))
		{
		}
$( )
		static int Compare(const Tuple<$TYPE_LIST($count)>& a, const Tuple<$TYPE_LIST($count)>& b)
		{
			$loop($count,0,$TUPLE_COMPARE)
			return 0;
		}
$( )
		bool operator==(const Tuple<$TYPE_LIST($count)>& value)const{ return Compare(*this, value) == 0; }
		bool operator!=(const Tuple<$TYPE_LIST($count)>& value)const{ return Compare(*this, value) != 0; }
		bool operator< (const Tuple<$TYPE_LIST($count)>& value)const{ return Compare(*this, value) < 0; }
		bool operator<=(const Tuple<$TYPE_LIST($count)>& value)const{ return Compare(*this, value) <= 0; }
		bool operator> (const Tuple<$TYPE_LIST($count)>& value)const{ return Compare(*this, value) > 0; }
		bool operator>=(const Tuple<$TYPE_LIST($count)>& value)const{ return Compare(*this, value) >= 0; }
	};
$$end

/***********************************************************************
Vczh Library++ 3.0
Developer: Zihan Chen(vczh)
Framework::Tuple
	
This file is generated by: Vczh Functional Macro
***********************************************************************/

#ifndef VCZH_TUPLE
#define VCZH_TUPLE

namespace vl
{
	class TupleNullItem
	{
	};

	template<$loopsep(11,0,$TYPENAME_NULL,$(,))>
	class Tuple
	{
	};
$$define $TUPLE_APPLY($count) $$begin
$( )
$TUPLE_DECLARATION($count)
$( )
$$end
$loop($sub($MAX_FUNCTION_NUMBER(),1),1,$TUPLE_APPLY)
}

#endif